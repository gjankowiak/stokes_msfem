int flag = 1;
// 0 will produce a mesh where all quads are split with diagonal x âˆ’ y = cte
// 1 will produce Union Jack flag type of mesh.
// 2 will produce a mesh where all quads are split with diagonal x + y = cte (v 3.8)

mesh Th = square(Nx,Ny,[Lx*x,Ly*y], flags=flag);

cout << "Building meshes" << endl;
mesh K = square(cx,cy,[Hx*x, Hy*y], flags=flag);
mesh M = emptymesh(K);
mesh MC = square(nx, ny, [Lx*x, Ly*y], flags=flag);
cout << "Building function spaces" << endl;
fespace Vh(Th,P1);
fespace Wh(Th,P1);
fespace Zh(Th,P0);

fespace VK(K,P1);
fespace ZK(K,P0);
fespace PK(K,P1);
fespace VM(M,P1);

fespace VC(MC, P0);

cout << "done with both" << endl;

Vh bathone;
Zh bath, nuh=1, sigh;
real[int] batharray(bath.n);

cout << "Getting mask" << endl;
if (maskexists(config, Nf) == 0) {
    loadmask(config, Nf, batharray);
    bath[] = batharray;
}

real shiftX=0, shiftY=0;
func X=x+shiftX;
func Y=y+shiftY;

nuh[]=nuh[]+(1/delta-1)*bath[];
sigh[]=1/delta/La/La*bath[];
