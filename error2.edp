//string config = "channel_RH";

include "utils.edp"

string reffile = "/home/gjankowiak/Code/MsFEM/Stokes/FreeFem/refs/channel_RH_1024.dat";
string crkdir = "/home/gjankowiak/Code/MsFEM/Stokes/FreeFem/CR3_channel_RH_data";

// FIXME trÃ¨s casse gueule
include "/home/gjankowiak/Code/MsFEM/Stokes/FreeFem/CR3_channel_RH_data/1024-32/params.edp"

//int ncases = 6;
int ncases = 5;
int[int] ns(ncases);
//ns = [4, 8, 16, 32, 64, 128];
//ns = [2, 4, 8, 16, 20, 30, 40, 50, 60, 70, 80, 90, 100, 128];
ns = [4, 8, 16, 32, 64, 128];

ncases = ns.n;

mesh Th = square(Nx,Ny,[Lx*x,Ly*y], flags=1);

fespace Vh(Th,P1);
fespace Vh0(Th,P0);
Vh0 mask, holes;

string holespath;
holespath = "configs/" + config + "/masks/" + Nf + ".dat";
ifstream holesfile(holespath);
holesfile >> holes[];
mask = 1-holes;

// load reference data
Vh UxRef, UyRef, PRef;
Vh UxCR, UyCR, PCR;

real UL2, UH1, PL2;

string uxfilename;
string uyfilename;
string pfilename;
string cpfilename;
string rundir, storedir;

string errorcsv = crkdir + "/.error_" + Nf + ".csv";
ofstream csv(errorcsv);

csv << "n,U L2 error,U H1 error,P L2 error,P L2 fine error,U rel L2 error,U rel H1 error,P rel L2 error,P rel L2 fine error,directory" << endl;

{
    // rundir = refdir + "/" + Nf;
    // uxfilename = rundir + "/ux.dat";
    // uyfilename = rundir + "/uy.dat";
    // pfilename = rundir + "/p.dat";

    // ifstream uxfile(uxfilename);
    // ifstream uyfile(uyfilename);
    // ifstream pfile(pfilename);

    // uxfile >> UxRef[];
    // uyfile >> UyRef[];
    // pfile  >> PRef[];

    cout << "reffile: " << reffile << endl;
    ifstream sol(reffile);
    sol >> UxRef[] >> UyRef[] >> PRef[];

    UL2 = sqrt(int2d(Th)(mask*(UxRef*UxRef+UyRef*UyRef)));
    UH1 = sqrt(int2d(Th)(mask*(dx(UxRef)*dx(UxRef) + dy(UxRef)*dy(UxRef) +
                               dx(UyRef)*dx(UyRef) + dy(UyRef)*dy(UyRef))));
    PL2 = sqrt(int2d(Th)(mask*PRef*PRef));
}

for (int i=0; i<ncases; i++)
{
    int nn = ns(i);

    cout << "n: " << nn << endl;

    nx=nn;
    ny=nn;
    nx = Lx/Ly*nn;

    mesh MC = square(nx, ny, [Lx*x, Ly*y], flags=1);
    fespace VC(MC, P0);
    VC CPCR;

    rundir = crkdir + "/" + Nf + "-" + nn;
    storedir = getlinktarget(rundir);

    uxfilename = rundir + "/ux.dat";
    uyfilename = rundir + "/uy.dat";
    pfilename = rundir + "/p.dat";
    cpfilename = rundir + "/CP.dat";

    ifstream uxfile(uxfilename);
    ifstream uyfile(uyfilename);
    ifstream pfile(pfilename);
    ifstream cpfile(cpfilename);

    uxfile >> UxCR[];
    uyfile >> UyCR[];
    pfile  >> PCR[];
    cpfile  >> CPCR[];

    real ul2error, uh1error, cpl2error, pl2error;
    real urell2error, urelh1error, cprell2error, prell2error;

    ul2error = sqrt(int2d(Th)(mask*((UxRef - UxCR)^2 + (UyRef-UyCR)^2)));
    uh1error = sqrt(int2d(Th)(mask*((dx(UxRef) - dx(UxCR))^2 + (dx(UyRef)-dx(UyCR))^2
                               +(dy(UxRef) - dy(UxCR))^2 + (dy(UyRef)-dy(UyCR))^2)));
    cpl2error = sqrt(int2d(Th)(mask*((PRef - CPCR)^2)));
    pl2error = sqrt(int2d(Th)(mask*((PRef - CPCR - PCR)^2)));

    urell2error = ul2error/UL2;
    urelh1error = uh1error/UH1;
    cprell2error = cpl2error/PL2;
    prell2error  = pl2error/PL2;

    csv << nn << "," << ul2error << "," << uh1error << "," << cpl2error << "," << pl2error
              << "," << urell2error << "," << urelh1error << "," << cprell2error << "," << prell2error << "," << storedir << endl;
}
